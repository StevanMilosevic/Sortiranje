package heap;

/* Ovaj algoritam za sortiranje je veoma efikasan, vreme potrebno da se izvrsi heap sort se logaritamski
 * povecava dok se vreme za druge vrste sortiranja povecava eksponencijalno kako raaste broj elemenata niza
 * koji treba da se sortira.
 * Upotreba memorije je minimalna, posto je ovom algoritmu potrebna samo inicijalna memorija koja drzi niz
 * Nedeostatak heap sorta je da nije efikasan kada radi sa kompleksnim tipovima podataka.
 * 
 * Heap je nalik drvetu (tree), ali je uglavnom implementiran kao niz (uredjeno binarno stablo)
 * Pravilo prilikom pravljenja heap-a je da svaki red mora da bude kompletan sto znaci da mora postojati
 * element u svakom od nodova (cvorova) osim poslednjeg reda. Takodje je pravilo da su kljucevi roditelja veci od dece
 * 
 * Za razliku od binarnog stabla, levo dete nije uvek manje od onog desno. 
 * Max-heap ima ogranicenje da je vrednost parent noda veca od vrednosti dete noda 
 * Build-max-heap - kreiramo max-heap iz nesortiranog niza 
 * Heapify - slicno build-max-heap, ali podrazumeva da je deo niza sortiran (zbog toga je i brzi) 
 * 
 * U sustini konstantno cemo praviti max-heap kako bi pronasli najveci element, 
 * da bi ga zatim pomerili iz heap-a i ubacili ga u sortiran niz  
 * 
 * Kada imamo nesortiran niz, zovemo build-max-heap koji nam pravi max-heap, tako ce da znamo koji je element 
 * najveci - posto je napravljen niz koji pocinje sa najvecim elementom.
 * Zatim taj najveci element menjamo sa onim na kraju niza, menjamo im mesta - onaj najveci prelazi 
 * na poslednje mesto u nizu i smatramo ga sortiranim.
 * Sada zovemo heapify - posto je jedan deo niza sortiran, to nam opet pravi max-heap pa opet ponavljamo 
 * prethodni korak - zamenjujemo najveci element sa pocetka sa onim na kraju NESORTIRANOG niza (onaj prethodno 
 * sortirani deo niza se vise ne dira). Tako da i taj sledeci element koji se premesta na kraj niza se smatra
 * sortiranim. 
 * Opet nam treba heap (binarno stablo) pa zato opet zovemo heapify koji pravi max-heap itd u krug sve dok se ne
 * sortira ceo niz */

public class Main {

	public static void main(String[] args) {
		int[] niz = {9, 32, 11, 15, 6, 10, 21, 8, 3, 1, 14, 7, 16};
		for (int i : niz)
			System.out.print(i + " ");

		sort(niz);
		
		System.out.println("\nNiz nakon heap sorta: ");
		for(int i : niz)
			System.out.print(i + " ");
	}

	public static void sort(int[] niz) {
		
		// pravimo heap (preuredjujemo niz)
		for (int i = niz.length / 2 - 1; i >= 0; i--)
			heapify(niz, niz.length, i);

		// jedan po jedan izbacujemo elemente iz heap-a
		for (int i = niz.length - 1; i > 0; i--) {
			// Move current root to end
			int temp = niz[0];
			niz[0] = niz[i];
			niz[i] = temp;

			// zovemo heapify nad polu sortiranim nizom
			heapify(niz, i, 0);
		}
	}

	// To heapify a subtree rooted with node i which is
	// an index in arr[]. n is size of heap
	static void heapify(int[] niz, int n, int i) {
		int najveci = i; // Initialize largest as root
		int l = 2 * i + 1; // left = 2*i + 1
		int r = 2 * i + 2; // right = 2*i + 2

		// If left child is larger than root
		if (l < n && niz[l] > niz[najveci])
			najveci = l;

		// If right child is larger than largest so far
		if (r < n && niz[r] > niz[najveci])
			najveci = r;

		// If largest is not root
		if (najveci != i) {
			int temp = niz[i];
			niz[i] = niz[najveci];
			niz[najveci] = temp;

			// Recursively heapify the affected sub-tree
			heapify(niz, n, najveci);
		}
	}
}
